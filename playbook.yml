---
- name: Deploy the application file
  hosts: all
  become: true
  become_method: sudo
  vars:
    NODE_VERSION: "18.19.0"
    APP_NAME: "myapp"
    GITHUB_TOKEN: "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"
    POSTGRES_HOST: "127.0.0.1"
    POSTGRES_PORT: "5432"
    POSTGRES_USER: "postgres"
    POSTGRES_PASSWORD: "secret"
    myip: "{{ ansible_eth0.ipv4.address }}"
    clientid: "69d0c49c8e342829949c"
    clienttoken: "f7c451b691314d42ae6621ef2dae17ce193c92df"
  tasks:
  - name: OS | Update OS
    apt:
      upgrade: yes
      update_cache: yes
      cache_valid_time: 86400 #One day
    tags: os

  - name: OS | Install Basic packages
    apt:
      pkg:
        - apt-transport-https
        - ca-certificates
        - curl
        - build-essential
        - python
        - make
        - wget
        - g++
        - git
        - postgresql
      state: latest
      update_cache: true
    tags: os
  - name: OS | Disable SWAP
    shell: swapoff -a
    tags: docker
  - name: OS | Disable SWAP in fstab
    replace:
      path: /etc/fstab
      regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
      replace: '# \1'
    tags: os
  - name: OS | Set kernel parameters
    sysctl:
      name: "{{ item.name }}"
      value: "{{ item.value }}"
      sysctl_file: /etc/sysctl.d/kubernetes.conf
      reload: false
    loop:
    - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
    - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
    - { name: 'net.ipv4.ip_forward', value: '1' }
    tags: os
  - name: OS | Set modprobe
    modprobe:
      name: "{{ item }}"
      state: present
      persistent: present
    loop:
    - overlay
    - br_netfilter
    tags: os
  - name: DOCKER | Add Docker GPG apt Key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present
    tags: docker
  - name: DOCKER | Add Docker Repository
    apt_repository:
      repo: deb https://download.docker.com/linux/ubuntu focal stable
      state: present
    tags: docker
  - name: DOCKER | Update apt and install docker-ce
    apt:
      name: docker-ce
      state: latest
      update_cache: true
    tags: docker
  - name: GIT | Create folder to keep git Clone
    file:
      path: "/backstage"
      state: directory
      mode: 0775

  # - name: GIT | Clone the repository
  #   ansible.builtin.git:
  #     repo: https://github.com/backstage/backstage.git
  #     dest: "/backstage"

  - name: APP | Install nvm
    shell: |
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
    args:
      executable: /bin/bash
      chdir: "$HOME"
      creates: "$HOME/.nvm/nvm.sh"
    tags: nvm
  - name: APP | Setup .profile
    ansible.builtin.lineinfile:
      path: ~/.profile
      line: source ~/.nvm/nvm.sh
      create: yes
    tags: nvm
  - name: APP | Install node
    shell: |
      source ~/.nvm/nvm.sh
      nvm install {{item}}
      nvm use 18
      nvm alias default 18
    args:
      executable: /bin/bash
      chdir: "$HOME"
      creates: "$HOME/.nvm/versions/node/v{{item}}"
    loop:
      - "{{NODE_VERSION}}"
    tags: nvm

  - name: APP | Create a symbolic link
    file:
      src: "$HOME/.nvm/versions/node/v{{NODE_VERSION}}/bin/{{item}}"
      dest: /bin/{{item}}
      owner: root
      group: root
      state: link
    loop:
    - node
    - npx
    - npm
    tags: nvm

  - name: APP |  | install yarn
    shell: npm install --global yarn
    tags: yarn
  - name:  APP | Create a symbolic link for YARN
    file:
      src: "$HOME/.nvm/versions/node/v{{NODE_VERSION}}/bin/{{item}}"
      dest: /bin/{{item}}
      owner: root
      group: root
      state: link
    loop:
    - yarn
    tags: yarn
  - name: APP | deploy backstage with npx
    shell: |
      yarn set version 1.22.19
      echo "{{APP_NAME}}" | npx @backstage/create-app@latest
      yarn add --cwd packages/backend pg
      sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'secret';"
    args:
      chdir: /backstage
  - name: APP | application config file using jinja2
    ansible.builtin.template:
       src: app-config.yaml.j2
       dest: /backstage/{{APP_NAME}}/app-config.yaml
    tags: svc
  - name: APP | env config file using jinja2
    ansible.builtin.template:
       src: .env.j2
       dest: /backstage/{{APP_NAME}}/.env
    tags: svc

  - name: APP | authorization GITHUB using jinja2
    ansible.builtin.template:
       src: .env.j2
       dest: /backstage/{{APP_NAME}}/.env
    tags: svc

  - name: APP | deploy file for authentication
    copy:
      src: App.tsx.j2
      dest: /backstage/{{APP_NAME}}/packages/app/src/App.tsx
      owner: root
      group: root
      mode: '0644'
    tags: svc

  - name: APP | deploy file for authentication
    copy:
      src: package.json
      dest: /backstage/{{APP_NAME}}/package.json
      owner: root
      group: root
      mode: '0644'
    tags: svc

  - name: APP |
    shell: yarn install
    args:
      chdir: /backstage/{{APP_NAME}}

  - name: APP | deploy service
    ansible.builtin.template:
       src: backstage.service.j2
       dest: /etc/systemd/system/backstage.service
       mode: 644
    tags: svc

  - name: APP | Restart service, also issue daemon-reload to pick up config changes
    systemd_service:
      name: backstage
      state: started
      enabled: true
      daemon_reload: true
    tags: svc
  - name: IP to access
    debug:
      msg: "{{ myip }}"
#  - name: trigger the app to start
#    shell: |
#      cd /{{APP_NAME}}
#      GITHUB_token=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 POSTGRES_HOST="127.0.0.1" POSTGRES_PORT="5432" POSTGRES_USER="postgres" POSTGRES_PASSWORD="secret" yarn dev